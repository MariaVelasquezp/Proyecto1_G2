LIBRARY IEEE;
USE ieee.std_logic_1164.all;
-------------------------------------------------------------------------------------
ENTITY resta IS
	PORT(	num_A	 :	IN 	STD_LOGIC_VECTOR (3 DOWNTO 0);
			num_B	 :	IN		STD_LOGIC_VECTOR (3 DOWNTO 0);
			result : OUT  	STD_LOGIC_VECTOR (7 DOWNTO 0);
			evalRE : OUT  	STD_LOGIC_VECTOR (1 DOWNTO 0));
END ENTITY resta;
-------------------------------------------------------------------------------------
ARCHITECTURE functional OF resta IS
	SIGNAL numUp 			:	STD_LOGIC_VECTOR (3 DOWNTO 0);
	SIGNAL numDown			:	STD_LOGIC_VECTOR (3 DOWNTO 0);
	SIGNAL numDown_NOT 	:	STD_LOGIC_VECTOR (3 DOWNTO 0);
	SIGNAL numDown_A2	   : 	STD_LOGIC_VECTOR (3 DOWNTO 0);
	SIGNAL cout_nada 		: 	STD_LOGIC_VECTOR (1 DOWNTO 0);
	SIGNAL R_esult 		: 	STD_LOGIC_VECTOR (3 DOWNTO 0);
-------------------------------------------------------
BEGIN
	numUp   <= 	num_B when (num_A < num_B) else 
					num_A;
	numDown <=  num_A when (num_A < num_B) else 
					num_B;

	evalRE(0) <= '1' when (num_A < num_B) else 
					 '0';
	evalRE(1) <= '1' when (R_esult > "1001") else 
					 '0';
	
-- A2 complement
	numDown_NOT <=  (NOT numDown);
	restDeciBCD_8bitsModule_1: ENTITY work.fulladerFourBits
	PORT MAP( 	a 		=> numDown_NOT,
					b 		=> "0001",
					cin 	=> '0',
					s 		=> numDown_A2,
					cout 	=> cout_nada(0));

-- resta de ambos
	restDeciBCD_8bitsModule_2: ENTITY work.fulladerFourBits
	PORT MAP( 	a 		=> numUp,
					b 		=> numDown_A2,
					cin 	=> '0',
					s 		=> R_esult,
					cout 	=> cout_nada(1));
					
	result(3 DOWNTO 0) <= R_esult;
	result(7 DOWNTO 4) <= "0000";
	

END ARCHITECTURE;